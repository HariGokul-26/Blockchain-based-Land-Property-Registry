# -*- coding: utf-8 -*-
"""Blockchain-based Land/Property Registry.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iJ0C6_IEo7kNPm2bQSxAzn_eEI5zy_sC
"""

import hashlib
import time

# Block class
class Block:
    def __init__(self, index, property_id, owner, sale_date, price, previous_hash):
        self.index = index
        self.property_id = property_id
        self.owner = owner
        self.sale_date = sale_date
        self.price = price
        self.timestamp = time.time()
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = f"{self.index}{self.property_id}{self.owner}{self.sale_date}{self.price}{self.timestamp}{self.previous_hash}"
        return hashlib.sha256(block_string.encode()).hexdigest()


# Blockchain class
class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, "0", "Genesis Block", "N/A", 0, "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_transaction(self, property_id, new_owner, sale_date, price):
        latest_block = self.get_latest_block()
        new_block = Block(
            index=len(self.chain),
            property_id=property_id,
            owner=new_owner,
            sale_date=sale_date,
            price=price,
            previous_hash=latest_block.hash
        )
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i-1]

            if current.hash != current.calculate_hash():
                return False
            if current.previous_hash != previous.hash:
                return False
        return True

    def print_chain(self):
        for block in self.chain:
            print(f"Block {block.index}")
            print(f" Property ID: {block.property_id}")
            print(f" Owner: {block.owner}")
            print(f" Sale Date: {block.sale_date}")
            print(f" Price: {block.price}")
            print(f" Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(block.timestamp))}")
            print(f" Hash: {block.hash}")
            print(f" Prev Hash: {block.previous_hash}")
            print("-" * 60)

    def get_property_history(self, property_id):
        print(f"\nüìú Ownership History for Property {property_id}:")
        for block in self.chain:
            if block.property_id == property_id:
                print(f" -> Owner: {block.owner}, Date: {block.sale_date}, Price: {block.price}")
        print("-" * 60)


# ---------------- DEMO ----------------
registry = Blockchain()

# Adding property transactions
registry.add_transaction("L001", "Alice", "2022-01-10", 100000)
registry.add_transaction("L001", "Bob", "2023-03-15", 120000)
registry.add_transaction("L001", "Charlie", "2024-06-20", 150000)

registry.add_transaction("L002", "David", "2023-02-05", 200000)
registry.add_transaction("L002", "Eva", "2024-04-12", 220000)

# Print entire blockchain
print("üè° FULL LAND REGISTRY BLOCKCHAIN")
registry.print_chain()

# Get ownership history of a specific property
registry.get_property_history("L001")
registry.get_property_history("L002")

# Validate chain
print("‚úÖ Blockchain valid?", registry.is_chain_valid())